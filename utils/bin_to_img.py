import os
import numpy as np
import matplotlib.pyplot as plt
from array import array
from tqdm import tqdm
from config.config import config


def is_pe_file(input_dir, filename):
    '''
    Check if the input file is a PE file.

    Parameters:
    - input_dir (str): The directory of the input file.
    - filename (str): The name of the input file.
    '''
    file_path = os.path.join(input_dir, filename)
    with open(file_path, "rb") as f:
        byte = f.read(2)
        if byte == b'MZ':
            return True
        else:
            return False


def bin_to_img(input_dir, output_dir, filename, is_show=False):
    '''
    Convert a Windows PE file to grayscale image.

    Parameters:
    - input_dir (str): The directory of the input file.
    - output_dir (str): The directory of the output image.
    - filename (str): The name of the input file.
    - is_show (bool): Whether to show the image.
    '''
    file_path = os.path.join(input_dir, filename)
    img_path = os.path.join(output_dir, filename + '.png')
    file_size = os.path.getsize(file_path)

    file_size_kb = file_size / 1024
    size_range = [0, 10, 30, 60, 100, 200, 500, 1000]
    width_arr = [32, 64, 128, 256, 384, 512, 768, 1024]
    idx = np.searchsorted(size_range, file_size_kb, side='right') - 1
    width = width_arr[idx]

    img = array('B')
    with open(file_path, 'rb') as f:
        img.fromfile(f, file_size)

    img = np.array(img, dtype=np.uint8)
    img.resize(int(np.ceil(file_size/width)), width)

    if is_show:
        plt.imshow(img, cmap='gray')
        plt.show()
    plt.imsave(img_path, img, cmap='gray')


def convert(input_dir, output_dir, verbose=False):
    '''
    Convert all the files in the input directory to grayscale images.
    Assumes that the input directory contains only one class of files.

    Parameters:
    - input_dir (str): The directory of the input files.
    - output_dir (str): The directory of the output images.
    - verbose (bool): Whether to print the information when current file is not a PE file.
    '''
    file_list = os.listdir(input_dir)
    file_list_bar = tqdm(file_list)

    for filename in file_list_bar:
        if config['check_file']:
            if is_pe_file(input_dir, filename):
                bin_to_img(input_dir, output_dir, filename)
            elif verbose:
                print(f"{input_dir}/{filename} is not a PE file!")
        else:
            bin_to_img(input_dir, output_dir, filename)
        file_list_bar.set_description(f"Processing {filename}")


def visualize(input_path, output_path, need=True):
    '''
    Convert all the files in the input directory to grayscale images.
    Assumes that the input directory contains serveral subdirectories, each of which contains only one class of files.

    Parameters:
    - input_path (str): The directory of the input files.
    - output_path (str): The directory of the output images.
    - need (bool): Whether to convert the files.
    '''
    if need:
        for subdir in os.listdir(input_path):
            convert(os.path.join(input_path, subdir),
                    os.path.join(output_path, subdir))


if __name__ == '__main__':
    visualize(config['data_path'], config['img_path'], config['need_convert'])
