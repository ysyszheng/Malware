'''load data from image dir for training and validation'''
import sys
sys.path.append('./')
import os
import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split
from PIL import Image
from utils import fix_seed
Image.MAX_IMAGE_PIXELS = None
from config.cfgs import cfgs


def get_dataset(data_dir, seed, split_ratio=[.8,.1,.1]):
    fix_seed(seed)
    data_transforms = {
        'train': transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    images_dataset = datasets.ImageFolder(data_dir, transform=data_transforms['train'])
    train_size = int(split_ratio[0] * len(images_dataset))
    val_size = int(split_ratio[1] * len(images_dataset))
    test_size = len(images_dataset) - train_size - val_size
    train_dataset, val_dataset, test_dataset = random_split(images_dataset, [train_size, val_size, test_size])

    return train_dataset, val_dataset, test_dataset

def get_dataloaders(train_dataset, val_dataset, test_dataset, seed, batch_size=32, num_workers=4):
    fix_seed(seed)

    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)

    return train_loader, val_loader, test_loader


if __name__ == '__main__':
    for dir in [cfgs['save_model_path'],cfgs['save_data_path'],cfgs['save_img_path']]:
        os.makedirs(dir, exist_ok=True)

    train_dataset, val_dataset, test_dataset = get_dataset(cfgs['malimg_path'], cfgs['seed'], split_ratio=cfgs['split_ratio'])
    train_loader, val_loader, test_loader = get_dataloaders(train_dataset, val_dataset, test_dataset, cfgs['seed'], cfgs['batch_size'], cfgs['num_workers'])
    torch.save(train_dataset, f'{cfgs["save_data_path"]}/train_dataset.pth')
    torch.save(val_dataset, f'{cfgs["save_data_path"]}/val_dataset.pth')
    torch.save(test_dataset, f'{cfgs["save_data_path"]}/test_dataset.pth')
    torch.save(train_loader, f'{cfgs["save_data_path"]}/train_loader.pth')
    torch.save(val_loader, f'{cfgs["save_data_path"]}/val_loader.pth')
    torch.save(test_loader, f'{cfgs["save_data_path"]}/test_loader.pth')
