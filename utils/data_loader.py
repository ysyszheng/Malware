'''load data from image dir for training and validation'''
import os
import random
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split
from PIL import Image
from utils.utils import fix_seed
Image.MAX_IMAGE_PIXELS = None


def get_data_loaders(data_dir, seed, batch_size=32, train_ratio=0.7, num_workers=4):
    """
    Returns train and validation data loaders for the given data directory.
    """
    fix_seed(seed)
    data_transforms = {
        'train': transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([]),
    }

    images_dataset = datasets.ImageFolder(data_dir, transform=data_transforms['train'])
    train_size = int(train_ratio * len(images_dataset))
    val_size = len(images_dataset) - train_size
    train_dataset, val_dataset = random_split(images_dataset, [train_size, val_size])

    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)

    return train_loader, val_loader


if __name__ == '__main__':
    train_loader, val_loader = get_data_loaders(r'../data/img')
    print(train_loader)