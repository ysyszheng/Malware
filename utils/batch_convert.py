import os
import sys
sys.path.append('./')
from config.cfgs import cfgs
from tqdm import tqdm
from utils import is_pe_file
from bin2img import bin_to_gray_image, bin_to_dct_image, bin_to_gray_image_exclude_rsrc, bin_to_rgb_image


def convert_one_class(input_dir, output_dir, check=False, algo='bin2gray'):
    '''
    Convert all the files in the input directory to grayscale images.
    Assumes that the input directory contains only one class of files.
    '''
    file_list = os.listdir(input_dir)
    file_list_bar = tqdm(file_list)

    for filename in file_list_bar:
        if algo in ['bin2gray', 'bin2dct', 'bin2grayexrsrc', 'bin2rgb']:
            file_path = os.path.join(input_dir, filename)
            img_path = os.path.join(output_dir, filename + '.png')
            if check and not is_pe_file(file_path):
                print(f"{file_path} is not a PE file!")
            else:
                if algo == 'bin2gray':
                    bin_to_gray_image(file_path, img_path)
                elif algo == 'bin2dct':
                    bin_to_dct_image(file_path, img_path)
                elif algo == 'bin2grayexrsrc':
                    bin_to_gray_image_exclude_rsrc(file_path, img_path)
                elif algo == 'bin2rgb':
                    bin_to_rgb_image(file_path, img_path)
        else:
            raise NotImplementedError
        file_list_bar.set_description(f"Processing {filename}")


def convert_all_class(input_path, output_path, check=False, algo='bin2gray'):
    '''
    Convert all the files in the input directory to grayscale images.
    Assumes that the input directory contains multiple classes of subdirectories.
    '''
    for subdir in os.listdir(input_path):
        input_dir = os.path.join(input_path, subdir)
        output_dir = os.path.join(output_path, subdir)
        if not os.path.exists(output_dir):
            os.mkdir(output_dir)
        convert_one_class(input_dir, output_dir, check, algo)


if __name__ == '__main__':
    convert_all_class(cfgs['data_path'], cfgs['img_gray_with_check_path'], check=cfgs['check'], algo=cfgs['algo'])