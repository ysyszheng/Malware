from config.cfgs import cfgs
import argparse
import os

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', type = str, default = None, help = 'Model')
    parser.add_argument('--mode', type = str, default = 'train', help = 'Mode')
    parser.add_argument('--path', type = str, default = None, help = 'File Path')
    parser.add_argument('--isimage', action='store_true', help='Is Image')
    args = parser.parse_args()

    if args.model is not None:
        cfgs['model'] = args.model
    if args.mode is not None:
        cfgs['mode'] = args.mode
    cfgs['num_classes'] = len(os.listdir(cfgs['malimg_path']))

    for dir in [cfgs['save_model_path'],cfgs['save_data_path'],cfgs['save_img_path']]:
        os.makedirs(dir, exist_ok=True)

    if args.model in ['vgg16', 'resnet50', 'googlenet', 'densenet121', 'shufflenet']:
        if args.mode != 'predict':
            from scripts.traincnn import Trainer
            trainer = Trainer(cfgs)
            if args.mode == 'train':
                trainer.training()
            elif args.mode == 'test':
                trainer.testing()
            else:
                raise NotImplementedError
        else:
            from scripts.predict import Predicter
            predicter = Predicter(cfgs)
            predicter.predict_cnn(args.path, args.isimage)
    elif args.model in ['bayesian_combination', 'stacking', 'majority_voting', 'distribution_summation']:
        if args.mode == 'ensemble':
            from scripts.ensemble import Ensembler
            ensembler = Ensembler(cfgs)
            if args.model == 'majority_voting':
                ensembler.majority_voting()
            elif args.model == 'distribution_summation':
                ensembler.distribution_summation()
            elif args.model == 'bayesian_combination':
                ensembler.bayesian_combination()
            elif args.model == 'stacking':
                ensembler.stacking()
        elif args.mode == 'predict':
            from scripts.predict import Predicter
            predicter = Predicter(cfgs)
            predicter.predict_ensemble(args.path, args.isimage)
        else:
            raise NotImplementedError
    else:
        raise NotImplementedError