import torch
import torch.nn as nn
import torch.nn.functional as F
import timm

class Swin_T(nn.Module):
    def __init__(self, num_classes=1000):
        super(Swin_T, self).__init__()
        self.swin_t = timm.create_model('swin_base_patch4_window7_224', pretrained=True)
        self.fc1 = nn.Linear(1000, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.swin_t(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x
    
    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)
