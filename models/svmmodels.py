import numpy as np
import torch
from sklearn.svm import SVC

class OvASVM:
    def __init__(self, n_classes, C=1.0, kernel='linear'):
        self.n_classes = n_classes
        self.C = C
        self.kernel = kernel
        self.models = []

    def fit(self, X, y):
        for i in range(self.n_classes):
            y_i = np.where(y == i, 1, -1)
            model = SVC(C=self.C, kernel=self.kernel)
            model.fit(X, y_i)
            self.models.append(model)

    def predict(self, X):
        scores = np.zeros((X.shape[0], self.n_classes))
        for i in range(self.n_classes):
            scores[:, i] = self.models[i].decision_function(X)
        scores = torch.from_numpy(scores).float()
        return scores
