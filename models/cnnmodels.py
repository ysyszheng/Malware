import torch.nn as nn
import torchvision.models as models


class VGG16(nn.Module):
    def __init__(self, num_classes=1000):
        super(VGG16, self).__init__()
        # self.vgg = models.vgg16(weights='DEFAULT') # new version
        self.vgg = models.vgg16(pretrained=True)
        num_features = self.vgg.classifier[-1].in_features
        self.vgg.classifier[-1] = nn.Linear(num_features, num_classes)

    def forward(self, x):
        x = self.vgg(x)
        return x
    

class ResNet50(nn.Module):
    def __init__(self, num_classes=1000):
        super(ResNet50, self).__init__()
        # self.resnet = models.resnet50(weights='DEFAULT') # new version
        self.resnet = models.resnet50(pretrained=True)
        num_features = self.resnet.fc.in_features
        self.resnet.fc = nn.Linear(num_features, num_classes)

    def forward(self, x):
        x = self.resnet(x)
        return x
