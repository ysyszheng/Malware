import torch
import torch.nn as nn
import torchvision.models as models
import torch.nn.functional as F
from torchvision import transforms


class VGG16(nn.Module):
    def __init__(self, num_classes=1000):
        super(VGG16, self).__init__()
        self.vgg = models.vgg16(pretrained=True)
        self.fc1 = nn.Linear(self.vgg.classifier[-1].out_features, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.froze_conv_layers_weights()
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.vgg(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x
    
    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)

    def froze_conv_layers_weights(self):
        for name, param in self.named_parameters():
            if 'vgg.features' in name:
                param.requires_grad = False
        

class ResNet50(nn.Module):
    def __init__(self, num_classes=1000):
        super(ResNet50, self).__init__()
        self.resnet = models.resnet50(pretrained=True)
        self.fc1 = nn.Linear(self.resnet.fc.out_features, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.resnet(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x

    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)


class GoogLeNet(nn.Module):
    def __init__(self, num_classes=1000):
        super(GoogLeNet, self).__init__()
        self.googlenet = models.googlenet(pretrained=True)
        self.fc1 = nn.Linear(self.googlenet.fc.out_features, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.googlenet(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x

    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)


class DenseNet121(nn.Module):
    def __init__(self, num_classes=1000):
        super(DenseNet121, self).__init__()
        self.densenet = models.densenet121(pretrained=True)
        self.fc1 = nn.Linear(self.densenet.classifier.out_features, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.densenet(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x

    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)


class ShuffleNet(nn.Module):
    def __init__(self, num_classes=1000):
        super(ShuffleNet, self).__init__()
        self.shufflenet = models.shufflenet_v2_x1_0(pretrained=True)
        self.fc1 = nn.Linear(self.shufflenet.fc.out_features, 500)
        self.fc2 = nn.Linear(500, num_classes)
        self.initialize_add_layers_weights()

    def forward(self, x):
        x = self.shufflenet(x)
        x = self.fc1(x)
        x = F.relu6(x)
        x = self.fc2(x)
        return x

    def initialize_add_layers_weights(self):
        for m in [self.fc1, self.fc2]:
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)