import argparse
import yaml


def load_config(config_path):
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    return config


def parse_args():
    parser = argparse.ArgumentParser(description="Image-Based Malware Homology Analysis", 
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-v', '--version', action='version', 
                        version='%(prog)s 1.0')
    parser.add_argument('-c', '--config', '--cfg', type=str, default=r'./config/config.yaml', 
                        help='YAML configuration file')
    parser.add_argument('--data_path', type=str, default=None, 
                        help='Path of Windows PE files dataset')
    parser.add_argument('--img_path', type=str, default=None, 
                        help='Path of output images to save')
    parser.add_argument('--need_convert', type=bool, default=None, 
                        help='Need convert PE file to image or not')
    parser.add_argument('--check_file', type=bool, default=None, 
                        help='Check if the input is a PE file')
    parser.add_argument('--convert_algo', type=str, default=None, 
                        help='Convert algorithm')
    parser.add_argument('--cuda_idx', type=int, default=None, 
                        help='Cuda index')
    parser.add_argument('--num_classes', type=int, default=None, 
                        help='Numbers of malware classes')
    parser.add_argument('--train_ratio', type=float, default=None, 
                        help='Ratio of training set to the whole dataset')
    parser.add_argument('--num_epochs', type=int, default=None, 
                        help='Number of epochs')
    parser.add_argument('--batch_size', type=int, default=None, 
                        help='Batch size')
    parser.add_argument('--learning_rate', type=float, default=None, 
                        help='Learning rate')
    parser.add_argument('--momentum', type=float, default=None, 
                        help='Momentum')
    parser.add_argument('--weight_decay', type=float, default=None, 
                        help='Weight decay')
    parser.add_argument('--num_workers', type=int, default=None, 
                        help='Number of workers')
    
    args = parser.parse_args()
    return args


def get_config():
    args = parse_args()

    if args.config is not None:
        config = load_config(args.config)
    else:
        config = {}

    if args.data_path is not None:
        config['data_path'] = args.data_path
    if args.img_path is not None:
        config['img_path'] = args.img_path
    if args.need_convert is not None:
        config['need_convert'] = args.need_convert
    if args.check_file is not None:
        config['check_file'] = args.check_file
    if args.cuda_idx is not None:
        config['cuda_idx'] = args.cuda_idx
    if args.num_classes is not None:
        config['num_classes'] = args.num_classes
    if args.train_ratio is not None:
        config['train_ratio'] = args.train_ratio
    if args.num_epochs is not None:
        config['num_epochs'] = args.num_epochs
    if args.batch_size is not None:
        config['batch_size'] = args.batch_size
    if args.learning_rate is not None:
        config['learning_rate'] = args.learning_rate
    if args.momentum is not None:
        config['momentum'] = args.momentum
    if args.weight_decay is not None:
        config['weight_decay'] = args.weight_decay
    if args.num_workers is not None:
        config['num_workers'] = args.num_workers

    return config


if __name__ == '__main__':
    config = get_config()
    print(config)
