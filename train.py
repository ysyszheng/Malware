import torch
from tqdm import tqdm
from config.config import get_config
from models.cnnmodels import VGG16, ResNet50
from scripts.data_loader import get_data_loaders


def train_cnn(train_loader, model, optimizer, criterion, num_epochs, device):
    model.train()
    model.to(device)

    for epoch in range(num_epochs):
        running_loss = 0.0
        bar = tqdm(train_loader)
        for (inputs, labels) in bar:
            inputs, labels = inputs.to(device), labels.to(device)
            model.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        bar.set_description('Epoch %d/%d, loss: %.3f' %
                            (epoch + 1, num_epochs, running_loss / len(train_loader)))

    print('***** Training finished *****')


if __name__ == '__main__':
    config = get_config()
    IMG_PATH = config['img_path']
    NUM_CLASSES = config['num_classes']
    CUDA_IDX = config['cuda_idx']
    TRAIN_RATIO = config['train_ratio']
    NUM_EPOCHS = config['num_epochs']
    BATCH_SIZE = config['batch_size']
    LEARNING_RATE = config['learning_rate']
    MOMENTUM = config['momentum']
    WEIGHT_DECAY = config['weight_decay']
    NUM_WORKERS = config['num_workers']

    device = f'cuda:{CUDA_IDX}' if torch.cuda.is_available() else 'cpu'
    train_loader, val_loader = get_data_loaders(IMG_PATH, batch_size=BATCH_SIZE, 
                                                train_ratio=TRAIN_RATIO, num_workers=NUM_WORKERS)

    model = VGG16(num_classes=NUM_CLASSES)
    optimizer = torch.optim.SGD(model.parameters(), lr=LEARNING_RATE, 
                                momentum=MOMENTUM, weight_decay=WEIGHT_DECAY)
    criterion = torch.nn.CrossEntropyLoss()

    train_cnn(train_loader, model, optimizer, criterion, NUM_EPOCHS, device=device)

    # validation
    model.eval()
